1. Answer:

---> JSX stands for JavaScript XML.

It allows you to write HTML-like code inside JavaScript 
 which React then compiles into regular JavaScript function calls (React.createElement).

---> we use It
1.Makes UI code more readable and declarative.

2.Lets you mix JavaScript and HTML-like syntax in the same file.

3.Prevents you from manually calling React.createElement() for every element.


2.Answer:

---> Sate
1.Data that belongs to a component and can change over time.
2.Owned by the component itself.
3.it can be updated using setState or hooks like useState.
4.For dynamic data that changes within the component.

--->Props
1.Data passed from a parent component to a child component.
2.Owned by the parent, received by the child
3.props are read-only.
4.For passing static or dynamic values down the component tree.


# State and Props → State is local and changeable, props are external and read-only

3.Answer:

---> useState is a React Hook that allows functional components to use state.

It returns two values:

1.The current state value
2.A function to update that value

# useState → Lets you add state in function components.

4.Answer:

---> There are several ways:

1.Lift state up --> Move the state to the nearest common parent and pass it as props to child components.
Most common and simple method.

2.Context API --> Use React.createContext() to share state across deeply nested components without prop drilling

3.State management libraries --> Redux, Zustand, Recoil, Jotai, etc., for larger apps with complex state sharing.


5.Answer:

In React, event handling is similar to HTML, but with some differences:

1.Use camelCase instead of lowercase (onClick not onclick)
2.Pass a function reference, not a string.

Event handling --> Use camelCase and function references.